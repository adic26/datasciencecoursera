license()
version()
citation()
q()
setwd("~/Courses/Coursera/RProgramming")
source('~/Courses/Coursera/RProgramming/pa2/makeVector.r')
source('~/Courses/Coursera/RProgramming/pa2/cachemean.r')
bigVect <- makeVector(1:1000)
cachemean(bigVect)
biggerVector <- makeVector(1:10000)
cachemean(biggerVector)
cachemean(bigVect)
source('~/Courses/Coursera/RProgramming/pa2/makeVector.r')
someMatrix = matrix()
?matrix
?mean
source('~/Courses/Coursera/RProgramming/pa2/cachematrix.R')
myMat <- matrix(1:4,2,2)
myMat
makeCacheMatrix(myMat)
bigMatrix <- makeCacheMatrix(myMat)
cacheSolve(bigMatrix)
myMat
cacheSolve(bigMatrix)
source('~/Courses/Coursera/RProgramming/pa2/cachemean.r')
source('~/Courses/Coursera/RProgramming/pa2/cachematrix.R')
c(1,2,3,4)
c(1,2,c(1,2))
matrix(c(1:4))
matrix(c(1:4),2,2)
b<-matrix(1:4,ncol=2)
b
makeCacheMatrix(b)
matA <- makeCacheMatrix(b)
cacheSolve(matA)
library(datasets)
data(iris)
Sepal.Length
iris
sepalShit <- iris$Sepal.Length
virginaOnly <- iris$Species
virginaOnly
View(iris)
data1 <- iris
allVirgin <- data1[,"species"]
allVirgin <- data1[,"Species"]
allVirgin2 <- data1[,"Species"]=="virginica"
data2 <- iris[allVirgin2,]
View(data2)
mean(data2$Sepal.Length)
rowMeans(iris[,1:4])
apply(iris[,1:4],2,mean)
iris[,1:4]
?apply
data(mtcars)
?mtcars
mean(mtcars$mpg, mtcars$cyl)
View(mtcars)
tapply(mtcars$cyl, mtcars$mpg, mean)
split(mtcars,mtcars$cyl)
sapply(split(mtcars$mpg, mtcars$cyl), mean)
sapply(split(mtcars$hp, mtcars$cyl), mean)
s <- sapply(split(mtcars$hp,mtcars$cyl),mean)
s
s[0]
s$4
s
s[1]
s[3]-s[1]
debug(ls)
ls(s.environment)
pos <- name
}
}
all.names <- .Internal(ls(envir, all.names))
exit
quit()
exit
exit()
quit
{
if (!missing(name)) {
if (!missing(name)) {
if (!missing(name)) {
